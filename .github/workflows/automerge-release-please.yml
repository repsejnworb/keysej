# .github/workflows/automerge-release-please.yml
name: automerge-release-please

on:
  # Fire on RP PR activity (uses base branch workflow, so it always exists)
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize      # RP force-pushes its branch on main changes
      - labeled
      - unlabeled        # handle eventual-consistency races by re-checking labels
      - edited
      - ready_for_review
  # Also fire when CI finishes (fallback/second path)
  workflow_run:
    workflows: ["ci"]     # <-- must match your CI workflow name exactly
    types: [completed]

permissions:
  contents: write
  pull-requests: write

jobs:
  automerge:
    runs-on: ubuntu-latest

    steps:
      # Normalize PR context for both event types
      - name: Derive PR context
        id: ctx
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            async function loadPRFromWorkflowRun() {
              const run = context.payload.workflow_run;
              if (run?.event !== 'pull_request' || !run?.pull_requests?.length) return null;
              const prNum = run.pull_requests[0].number;
              const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNum });
              return pr;
            }

            const pr = context.eventName === 'pull_request_target'
              ? context.payload.pull_request
              : await loadPRFromWorkflowRun();

            if (!pr) { core.setOutput('ok', 'false'); return; }

            core.setOutput('number', String(pr.number));
            core.setOutput('headSha', pr.head.sha);
            core.setOutput('base', pr.base.ref);
            core.setOutput('author', pr.user.login);
            core.setOutput('ok', 'true')

      # Fetch fresh PR (labels from API to avoid race), then gate
      - name: Check author/label/base
        id: gate
        if: steps.ctx.outputs.ok == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const prNum = parseInt(core.getInput('number') || '${{ steps.ctx.outputs.number }}', 10);

            const { data: pr } = await github.rest.pulls.get({ owner, repo, pull_number: prNum });
            const labels = pr.labels.map(l => l.name);
            const author = pr.user.login;
            const base   = pr.base.ref;

            const isBot = author === 'github-actions[bot]' || author === 'release-please[bot]';
            const hasPending = labels.includes('autorelease: pending');
            const ok = isBot && hasPending && base === 'main';

            core.setOutput('ok', ok ? 'true' : 'false');

      # Wait for PR CI to pass (repeat this step if you have multiple required checks)
      - name: Wait for PR CI
        if: steps.gate.outputs.ok == 'true'
        uses: lewagon/wait-on-check-action@v1
        with:
          ref: ${{ steps.ctx.outputs.headSha }}
          # MUST match exactly what's shown on the PR Checks tab, e.g. "ci / test"
          check-name: "ci / test"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10
          allowed-conclusions: success

      # Squash-merge the Release Please PR
      - name: Merge the PR (squash)
        if: steps.gate.outputs.ok == 'true'
        uses: peter-evans/merge-pull-request@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request: ${{ steps.ctx.outputs.number }}
          merge-method: squash
